/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approve } from '../fn/production-order-api/approve';
import { Approve$Params } from '../fn/production-order-api/approve';
import { create7 } from '../fn/production-order-api/create-7';
import { Create7$Params } from '../fn/production-order-api/create-7';
import { delete3 } from '../fn/production-order-api/delete-3';
import { Delete3$Params } from '../fn/production-order-api/delete-3';
import { dispenseInputItems } from '../fn/production-order-api/dispense-input-items';
import { DispenseInputItems$Params } from '../fn/production-order-api/dispense-input-items';
import { finish } from '../fn/production-order-api/finish';
import { Finish$Params } from '../fn/production-order-api/finish';
import { get13 } from '../fn/production-order-api/get-13';
import { Get13$Params } from '../fn/production-order-api/get-13';
import { getAllPending } from '../fn/production-order-api/get-all-pending';
import { GetAllPending$Params } from '../fn/production-order-api/get-all-pending';
import { ProductionOrderResponse } from '../models/production-order-response';
import { vet } from '../fn/production-order-api/vet';
import { Vet$Params } from '../fn/production-order-api/vet';


/**
 * Manages Production Order Endpoints
 */
@Injectable({ providedIn: 'root' })
export class ProductionOrderApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllPending()` */
  static readonly GetAllPendingPath = '/production/order';

  /**
   * Gets pending production Orders.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPending()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPending$Response(params?: GetAllPending$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductionOrderResponse>>> {
    return getAllPending(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets pending production Orders.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPending$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPending(params?: GetAllPending$Params, context?: HttpContext): Observable<Array<ProductionOrderResponse>> {
    return this.getAllPending$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductionOrderResponse>>): Array<ProductionOrderResponse> => r.body)
    );
  }

  /** Path part for operation `create7()` */
  static readonly Create7Path = '/production/order';

  /**
   * Creates New Empty Production Order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create7()` instead.
   *
   * This method doesn't expect any request body.
   */
  create7$Response(params?: Create7$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionOrderResponse>> {
    return create7(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates New Empty Production Order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create7$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  create7(params?: Create7$Params, context?: HttpContext): Observable<ProductionOrderResponse> {
    return this.create7$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionOrderResponse>): ProductionOrderResponse => r.body)
    );
  }

  /** Path part for operation `vet()` */
  static readonly VetPath = '/production/order/vet/{id}';

  /**
   * Vets production Order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `vet()` instead.
   *
   * This method doesn't expect any request body.
   */
  vet$Response(params: Vet$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionOrderResponse>> {
    return vet(this.http, this.rootUrl, params, context);
  }

  /**
   * Vets production Order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `vet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  vet(params: Vet$Params, context?: HttpContext): Observable<ProductionOrderResponse> {
    return this.vet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionOrderResponse>): ProductionOrderResponse => r.body)
    );
  }

  /** Path part for operation `finish()` */
  static readonly FinishPath = '/production/order/finish/{id}';

  /**
   * Completes production Order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `finish()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  finish$Response(params: Finish$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionOrderResponse>> {
    return finish(this.http, this.rootUrl, params, context);
  }

  /**
   * Completes production Order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `finish$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  finish(params: Finish$Params, context?: HttpContext): Observable<ProductionOrderResponse> {
    return this.finish$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionOrderResponse>): ProductionOrderResponse => r.body)
    );
  }

  /** Path part for operation `dispenseInputItems()` */
  static readonly DispenseInputItemsPath = '/production/order/dispense/{id}';

  /**
   * Gets pending production Orders.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dispenseInputItems()` instead.
   *
   * This method doesn't expect any request body.
   */
  dispenseInputItems$Response(params: DispenseInputItems$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionOrderResponse>> {
    return dispenseInputItems(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets pending production Orders.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dispenseInputItems$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dispenseInputItems(params: DispenseInputItems$Params, context?: HttpContext): Observable<ProductionOrderResponse> {
    return this.dispenseInputItems$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionOrderResponse>): ProductionOrderResponse => r.body)
    );
  }

  /** Path part for operation `approve()` */
  static readonly ApprovePath = '/production/order/approve/{id}';

  /**
   * Approves production Order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approve()` instead.
   *
   * This method doesn't expect any request body.
   */
  approve$Response(params: Approve$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionOrderResponse>> {
    return approve(this.http, this.rootUrl, params, context);
  }

  /**
   * Approves production Order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approve$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approve(params: Approve$Params, context?: HttpContext): Observable<ProductionOrderResponse> {
    return this.approve$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionOrderResponse>): ProductionOrderResponse => r.body)
    );
  }

  /** Path part for operation `get13()` */
  static readonly Get13Path = '/production/order/{id}';

  /**
   * Gets a production Order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get13()` instead.
   *
   * This method doesn't expect any request body.
   */
  get13$Response(params: Get13$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionOrderResponse>> {
    return get13(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a production Order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get13$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get13(params: Get13$Params, context?: HttpContext): Observable<ProductionOrderResponse> {
    return this.get13$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionOrderResponse>): ProductionOrderResponse => r.body)
    );
  }

  /** Path part for operation `delete3()` */
  static readonly Delete3Path = '/production/order/{id}';

  /**
   * Deletes production Order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete3()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete3$Response(params: Delete3$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete3(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes production Order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete3(params: Delete3$Params, context?: HttpContext): Observable<void> {
    return this.delete3$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
