/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create5 } from '../fn/purchase-quotation-api/create-5';
import { Create5$Params } from '../fn/purchase-quotation-api/create-5';
import { createBulk } from '../fn/purchase-quotation-api/create-bulk';
import { CreateBulk$Params } from '../fn/purchase-quotation-api/create-bulk';
import { delete1 } from '../fn/purchase-quotation-api/delete-1';
import { Delete1$Params } from '../fn/purchase-quotation-api/delete-1';
import { get5 } from '../fn/purchase-quotation-api/get-5';
import { Get5$Params } from '../fn/purchase-quotation-api/get-5';
import { getAllByPurchaseOrderId } from '../fn/purchase-quotation-api/get-all-by-purchase-order-id';
import { GetAllByPurchaseOrderId$Params } from '../fn/purchase-quotation-api/get-all-by-purchase-order-id';
import { PurchaseQuotationResponse } from '../models/purchase-quotation-response';
import { update5 } from '../fn/purchase-quotation-api/update-5';
import { Update5$Params } from '../fn/purchase-quotation-api/update-5';


/**
 * Manages quotations endpoints
 */
@Injectable({ providedIn: 'root' })
export class PurchaseQuotationApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get5()` */
  static readonly Get5Path = '/purchase/quotation/{id}';

  /**
   * Gets a quotation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get5()` instead.
   *
   * This method doesn't expect any request body.
   */
  get5$Response(params: Get5$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseQuotationResponse>> {
    return get5(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a quotation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get5(params: Get5$Params, context?: HttpContext): Observable<PurchaseQuotationResponse> {
    return this.get5$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseQuotationResponse>): PurchaseQuotationResponse => r.body)
    );
  }

  /** Path part for operation `update5()` */
  static readonly Update5Path = '/purchase/quotation/{id}';

  /**
   * Updates a quotation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update5()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  update5$Response(params: Update5$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseQuotationResponse>> {
    return update5(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a quotation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update5$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  update5(params: Update5$Params, context?: HttpContext): Observable<PurchaseQuotationResponse> {
    return this.update5$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseQuotationResponse>): PurchaseQuotationResponse => r.body)
    );
  }

  /** Path part for operation `delete1()` */
  static readonly Delete1Path = '/purchase/quotation/{id}';

  /**
   * Creates a new quotation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete1()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete1$Response(params: Delete1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete1(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new quotation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete1(params: Delete1$Params, context?: HttpContext): Observable<void> {
    return this.delete1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `create5()` */
  static readonly Create5Path = '/purchase/quotation';

  /**
   * Creates a new quotation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create5()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  create5$Response(params?: Create5$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseQuotationResponse>> {
    return create5(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new quotation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create5$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  create5(params?: Create5$Params, context?: HttpContext): Observable<PurchaseQuotationResponse> {
    return this.create5$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseQuotationResponse>): PurchaseQuotationResponse => r.body)
    );
  }

  /** Path part for operation `createBulk()` */
  static readonly CreateBulkPath = '/purchase/quotation/bulk';

  /**
   * Creates a new quotation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBulk()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createBulk$Response(params?: CreateBulk$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchaseQuotationResponse>>> {
    return createBulk(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new quotation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBulk$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createBulk(params?: CreateBulk$Params, context?: HttpContext): Observable<Array<PurchaseQuotationResponse>> {
    return this.createBulk$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchaseQuotationResponse>>): Array<PurchaseQuotationResponse> => r.body)
    );
  }

  /** Path part for operation `getAllByPurchaseOrderId()` */
  static readonly GetAllByPurchaseOrderIdPath = '/purchase/quotation/purchase-order/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllByPurchaseOrderId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByPurchaseOrderId$Response(params: GetAllByPurchaseOrderId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchaseQuotationResponse>>> {
    return getAllByPurchaseOrderId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllByPurchaseOrderId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByPurchaseOrderId(params: GetAllByPurchaseOrderId$Params, context?: HttpContext): Observable<Array<PurchaseQuotationResponse>> {
    return this.getAllByPurchaseOrderId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchaseQuotationResponse>>): Array<PurchaseQuotationResponse> => r.body)
    );
  }

}
