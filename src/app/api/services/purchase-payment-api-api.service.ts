/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create14 } from '../fn/purchase-payment-api/create-14';
import { Create14$Params } from '../fn/purchase-payment-api/create-14';
import { get11 } from '../fn/purchase-payment-api/get-11';
import { Get11$Params } from '../fn/purchase-payment-api/get-11';
import { getAll11 } from '../fn/purchase-payment-api/get-all-11';
import { GetAll11$Params } from '../fn/purchase-payment-api/get-all-11';
import { getByPurchaseOrderPayment } from '../fn/purchase-payment-api/get-by-purchase-order-payment';
import { GetByPurchaseOrderPayment$Params } from '../fn/purchase-payment-api/get-by-purchase-order-payment';
import { PurchasePaymentResponse } from '../models/purchase-payment-response';


/**
 * manages Purchase Payment Endpoints
 */
@Injectable({ providedIn: 'root' })
export class PurchasePaymentApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAll11()` */
  static readonly GetAll11Path = '/';

  /**
   * Gets all Purchase Payments.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll11()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll11$Response(params?: GetAll11$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchasePaymentResponse>>> {
    return getAll11(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Purchase Payments.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll11$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll11(params?: GetAll11$Params, context?: HttpContext): Observable<Array<PurchasePaymentResponse>> {
    return this.getAll11$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchasePaymentResponse>>): Array<PurchasePaymentResponse> => r.body)
    );
  }

  /** Path part for operation `create14()` */
  static readonly Create14Path = '/';

  /**
   * Creates Purchase Payment.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create14()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create14$Response(params: Create14$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchasePaymentResponse>> {
    return create14(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates Purchase Payment.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create14$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create14(params: Create14$Params, context?: HttpContext): Observable<PurchasePaymentResponse> {
    return this.create14$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchasePaymentResponse>): PurchasePaymentResponse => r.body)
    );
  }

  /** Path part for operation `get11()` */
  static readonly Get11Path = '/{id}';

  /**
   * Gets a Purchase Payment.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get11()` instead.
   *
   * This method doesn't expect any request body.
   */
  get11$Response(params: Get11$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchasePaymentResponse>> {
    return get11(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a Purchase Payment.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get11$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get11(params: Get11$Params, context?: HttpContext): Observable<PurchasePaymentResponse> {
    return this.get11$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchasePaymentResponse>): PurchasePaymentResponse => r.body)
    );
  }

  /** Path part for operation `getByPurchaseOrderPayment()` */
  static readonly GetByPurchaseOrderPaymentPath = '/purchase-payment/{purchaseOrderPaymentId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByPurchaseOrderPayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByPurchaseOrderPayment$Response(params: GetByPurchaseOrderPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchasePaymentResponse>>> {
    return getByPurchaseOrderPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByPurchaseOrderPayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByPurchaseOrderPayment(params: GetByPurchaseOrderPayment$Params, context?: HttpContext): Observable<Array<PurchasePaymentResponse>> {
    return this.getByPurchaseOrderPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchasePaymentResponse>>): Array<PurchasePaymentResponse> => r.body)
    );
  }

}
