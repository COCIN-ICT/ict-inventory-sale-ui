/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create11 } from '../fn/item-category-controller/create-11';
import { Create11$Params } from '../fn/item-category-controller/create-11';
import { get8 } from '../fn/item-category-controller/get-8';
import { Get8$Params } from '../fn/item-category-controller/get-8';
import { getAll8 } from '../fn/item-category-controller/get-all-8';
import { GetAll8$Params } from '../fn/item-category-controller/get-all-8';
import { ItemCategoryResponse } from '../models/item-category-response';
import { update9 } from '../fn/item-category-controller/update-9';
import { Update9$Params } from '../fn/item-category-controller/update-9';

@Injectable({ providedIn: 'root' })
export class ItemCategoryControllerApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get8()` */
  static readonly Get8Path = '/item-category/{id}';

  /**
   * Gets an Item Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get8()` instead.
   *
   * This method doesn't expect any request body.
   */
  get8$Response(params: Get8$Params, context?: HttpContext): Observable<StrictHttpResponse<ItemCategoryResponse>> {
    return get8(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets an Item Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get8$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get8(params: Get8$Params, context?: HttpContext): Observable<ItemCategoryResponse> {
    return this.get8$Response(params, context).pipe(
      map((r: StrictHttpResponse<ItemCategoryResponse>): ItemCategoryResponse => r.body)
    );
  }

  /** Path part for operation `update9()` */
  static readonly Update9Path = '/item-category/{id}';

  /**
   * Creates a new Item Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update9()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update9$Response(params: Update9$Params, context?: HttpContext): Observable<StrictHttpResponse<ItemCategoryResponse>> {
    return update9(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new Item Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update9$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update9(params: Update9$Params, context?: HttpContext): Observable<ItemCategoryResponse> {
    return this.update9$Response(params, context).pipe(
      map((r: StrictHttpResponse<ItemCategoryResponse>): ItemCategoryResponse => r.body)
    );
  }

  /** Path part for operation `getAll8()` */
  static readonly GetAll8Path = '/item-category';

  /**
   * Gets all Item Categories.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll8()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll8$Response(params?: GetAll8$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ItemCategoryResponse>>> {
    return getAll8(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Item Categories.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll8$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll8(params?: GetAll8$Params, context?: HttpContext): Observable<Array<ItemCategoryResponse>> {
    return this.getAll8$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ItemCategoryResponse>>): Array<ItemCategoryResponse> => r.body)
    );
  }

  /** Path part for operation `create11()` */
  static readonly Create11Path = '/item-category';

  /**
   * Creates a new Item Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create11()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create11$Response(params: Create11$Params, context?: HttpContext): Observable<StrictHttpResponse<ItemCategoryResponse>> {
    return create11(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new Item Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create11$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create11(params: Create11$Params, context?: HttpContext): Observable<ItemCategoryResponse> {
    return this.create11$Response(params, context).pipe(
      map((r: StrictHttpResponse<ItemCategoryResponse>): ItemCategoryResponse => r.body)
    );
  }

}
