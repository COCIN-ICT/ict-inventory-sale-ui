/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create4 } from '../fn/store-api/create-4';
import { Create4$Params } from '../fn/store-api/create-4';
import { get4 } from '../fn/store-api/get-4';
import { Get4$Params } from '../fn/store-api/get-4';
import { getAll4 } from '../fn/store-api/get-all-4';
import { GetAll4$Params } from '../fn/store-api/get-all-4';
import { getAllByDepartment } from '../fn/store-api/get-all-by-department';
import { GetAllByDepartment$Params } from '../fn/store-api/get-all-by-department';
import { StoreResponse } from '../models/store-response';
import { update4 } from '../fn/store-api/update-4';
import { Update4$Params } from '../fn/store-api/update-4';


/**
 * Manages store endpoints
 */
@Injectable({ providedIn: 'root' })
export class StoreApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get4()` */
  static readonly Get4Path = '/store/{id}';

  /**
   * Gets a Store.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get4()` instead.
   *
   * This method doesn't expect any request body.
   */
  get4$Response(params: Get4$Params, context?: HttpContext): Observable<StrictHttpResponse<StoreResponse>> {
    return get4(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a Store.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get4(params: Get4$Params, context?: HttpContext): Observable<StoreResponse> {
    return this.get4$Response(params, context).pipe(
      map((r: StrictHttpResponse<StoreResponse>): StoreResponse => r.body)
    );
  }

  /** Path part for operation `update4()` */
  static readonly Update4Path = '/store/{id}';

  /**
   * Updates a Store.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update4()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update4$Response(params: Update4$Params, context?: HttpContext): Observable<StrictHttpResponse<StoreResponse>> {
    return update4(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a Store.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update4$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update4(params: Update4$Params, context?: HttpContext): Observable<StoreResponse> {
    return this.update4$Response(params, context).pipe(
      map((r: StrictHttpResponse<StoreResponse>): StoreResponse => r.body)
    );
  }

  /** Path part for operation `getAll4()` */
  static readonly GetAll4Path = '/store';

  /**
   * Gets all Stores.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll4()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll4$Response(params?: GetAll4$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StoreResponse>>> {
    return getAll4(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Stores.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll4(params?: GetAll4$Params, context?: HttpContext): Observable<Array<StoreResponse>> {
    return this.getAll4$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StoreResponse>>): Array<StoreResponse> => r.body)
    );
  }

  /** Path part for operation `create4()` */
  static readonly Create4Path = '/store';

  /**
   * Creates new Store.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create4()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create4$Response(params: Create4$Params, context?: HttpContext): Observable<StrictHttpResponse<StoreResponse>> {
    return create4(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Store.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create4$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create4(params: Create4$Params, context?: HttpContext): Observable<StoreResponse> {
    return this.create4$Response(params, context).pipe(
      map((r: StrictHttpResponse<StoreResponse>): StoreResponse => r.body)
    );
  }

  /** Path part for operation `getAllByDepartment()` */
  static readonly GetAllByDepartmentPath = '/store/department/{id}';

  /**
   * Gets all Stores by Department.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllByDepartment()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByDepartment$Response(params: GetAllByDepartment$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StoreResponse>>> {
    return getAllByDepartment(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Stores by Department.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllByDepartment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByDepartment(params: GetAllByDepartment$Params, context?: HttpContext): Observable<Array<StoreResponse>> {
    return this.getAllByDepartment$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StoreResponse>>): Array<StoreResponse> => r.body)
    );
  }

}
