/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create12 } from '../fn/department-api/create-12';
import { Create12$Params } from '../fn/department-api/create-12';
import { DepartmentResponse } from '../models/department-response';
import { get9 } from '../fn/department-api/get-9';
import { Get9$Params } from '../fn/department-api/get-9';
import { getAll9 } from '../fn/department-api/get-all-9';
import { GetAll9$Params } from '../fn/department-api/get-all-9';
import { update10 } from '../fn/department-api/update-10';
import { Update10$Params } from '../fn/department-api/update-10';


/**
 * Manages Department Endpoints
 */
@Injectable({ providedIn: 'root' })
export class DepartmentApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get9()` */
  static readonly Get9Path = '/department/{id}';

  /**
   * Gets a Department.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get9()` instead.
   *
   * This method doesn't expect any request body.
   */
  get9$Response(params: Get9$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartmentResponse>> {
    return get9(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a Department.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get9$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get9(params: Get9$Params, context?: HttpContext): Observable<DepartmentResponse> {
    return this.get9$Response(params, context).pipe(
      map((r: StrictHttpResponse<DepartmentResponse>): DepartmentResponse => r.body)
    );
  }

  /** Path part for operation `update10()` */
  static readonly Update10Path = '/department/{id}';

  /**
   * Updates a Department.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update10()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update10$Response(params: Update10$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartmentResponse>> {
    return update10(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a Department.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update10$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update10(params: Update10$Params, context?: HttpContext): Observable<DepartmentResponse> {
    return this.update10$Response(params, context).pipe(
      map((r: StrictHttpResponse<DepartmentResponse>): DepartmentResponse => r.body)
    );
  }

  /** Path part for operation `getAll9()` */
  static readonly GetAll9Path = '/department';

  /**
   * Gets a Department.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll9()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll9$Response(params?: GetAll9$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DepartmentResponse>>> {
    return getAll9(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a Department.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll9$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll9(params?: GetAll9$Params, context?: HttpContext): Observable<Array<DepartmentResponse>> {
    return this.getAll9$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DepartmentResponse>>): Array<DepartmentResponse> => r.body)
    );
  }

  /** Path part for operation `create12()` */
  static readonly Create12Path = '/department';

  /**
   * Creates new Department.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create12()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create12$Response(params: Create12$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartmentResponse>> {
    return create12(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Department.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create12$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create12(params: Create12$Params, context?: HttpContext): Observable<DepartmentResponse> {
    return this.create12$Response(params, context).pipe(
      map((r: StrictHttpResponse<DepartmentResponse>): DepartmentResponse => r.body)
    );
  }

}
