/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create6 } from '../fn/purchase-item-api/create-6';
import { Create6$Params } from '../fn/purchase-item-api/create-6';
import { createBulk1 } from '../fn/purchase-item-api/create-bulk-1';
import { CreateBulk1$Params } from '../fn/purchase-item-api/create-bulk-1';
import { get6 } from '../fn/purchase-item-api/get-6';
import { Get6$Params } from '../fn/purchase-item-api/get-6';
import { getAllByPurchaseOrderId1 } from '../fn/purchase-item-api/get-all-by-purchase-order-id-1';
import { GetAllByPurchaseOrderId1$Params } from '../fn/purchase-item-api/get-all-by-purchase-order-id-1';
import { PurchaseItemResponse } from '../models/purchase-item-response';
import { update6 } from '../fn/purchase-item-api/update-6';
import { Update6$Params } from '../fn/purchase-item-api/update-6';


/**
 * Manages Purchase Order Items Endpoints
 */
@Injectable({ providedIn: 'root' })
export class PurchaseItemApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `update6()` */
  static readonly Update6Path = '/purchase/item/{id}';

  /**
   * Edits a Purchase Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update6()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update6$Response(params: Update6$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseItemResponse>> {
    return update6(this.http, this.rootUrl, params, context);
  }

  /**
   * Edits a Purchase Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update6$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update6(params: Update6$Params, context?: HttpContext): Observable<PurchaseItemResponse> {
    return this.update6$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseItemResponse>): PurchaseItemResponse => r.body)
    );
  }

  /** Path part for operation `get6()` */
  static readonly Get6Path = '/purchase/item/{id}';

  /**
   * Edits a Purchase Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get6()` instead.
   *
   * This method doesn't expect any request body.
   */
  get6$Response(params: Get6$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return get6(this.http, this.rootUrl, params, context);
  }

  /**
   * Edits a Purchase Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get6(params: Get6$Params, context?: HttpContext): Observable<void> {
    return this.get6$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `create6()` */
  static readonly Create6Path = '/purchase/item';

  /**
   * Creates new Purchase Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create6()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create6$Response(params: Create6$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseItemResponse>> {
    return create6(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Purchase Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create6$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create6(params: Create6$Params, context?: HttpContext): Observable<PurchaseItemResponse> {
    return this.create6$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseItemResponse>): PurchaseItemResponse => r.body)
    );
  }

  /** Path part for operation `createBulk1()` */
  static readonly CreateBulk1Path = '/purchase/item/bulk';

  /**
   * Creates bulk Purchase Items.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBulk1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBulk1$Response(params: CreateBulk1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchaseItemResponse>>> {
    return createBulk1(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates bulk Purchase Items.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBulk1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBulk1(params: CreateBulk1$Params, context?: HttpContext): Observable<Array<PurchaseItemResponse>> {
    return this.createBulk1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchaseItemResponse>>): Array<PurchaseItemResponse> => r.body)
    );
  }

  /** Path part for operation `getAllByPurchaseOrderId1()` */
  static readonly GetAllByPurchaseOrderId1Path = '/purchase/item/purchase-order/{id}';

  /**
   * Edits a Purchase Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllByPurchaseOrderId1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByPurchaseOrderId1$Response(params: GetAllByPurchaseOrderId1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchaseItemResponse>>> {
    return getAllByPurchaseOrderId1(this.http, this.rootUrl, params, context);
  }

  /**
   * Edits a Purchase Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllByPurchaseOrderId1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByPurchaseOrderId1(params: GetAllByPurchaseOrderId1$Params, context?: HttpContext): Observable<Array<PurchaseItemResponse>> {
    return this.getAllByPurchaseOrderId1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchaseItemResponse>>): Array<PurchaseItemResponse> => r.body)
    );
  }

}
