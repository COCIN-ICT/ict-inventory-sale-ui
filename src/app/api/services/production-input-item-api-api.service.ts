/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create8 } from '../fn/production-input-item-api/create-8';
import { Create8$Params } from '../fn/production-input-item-api/create-8';
import { delete4 } from '../fn/production-input-item-api/delete-4';
import { Delete4$Params } from '../fn/production-input-item-api/delete-4';
import { get14 } from '../fn/production-input-item-api/get-14';
import { Get14$Params } from '../fn/production-input-item-api/get-14';
import { getAllByProductionOrder } from '../fn/production-input-item-api/get-all-by-production-order';
import { GetAllByProductionOrder$Params } from '../fn/production-input-item-api/get-all-by-production-order';
import { ProductionItemResponse } from '../models/production-item-response';


/**
 * Manages Production Input Items Endpoints
 */
@Injectable({ providedIn: 'root' })
export class ProductionInputItemApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `create8()` */
  static readonly Create8Path = '/production/input-item';

  /**
   * Creates New Production Input Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create8()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create8$Response(params: Create8$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionItemResponse>> {
    return create8(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates New Production Input Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create8$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create8(params: Create8$Params, context?: HttpContext): Observable<ProductionItemResponse> {
    return this.create8$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionItemResponse>): ProductionItemResponse => r.body)
    );
  }

  /** Path part for operation `get14()` */
  static readonly Get14Path = '/production/input-item/{id}';

  /**
   * Gets a Production Input Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get14()` instead.
   *
   * This method doesn't expect any request body.
   */
  get14$Response(params: Get14$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionItemResponse>> {
    return get14(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a Production Input Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get14$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get14(params: Get14$Params, context?: HttpContext): Observable<ProductionItemResponse> {
    return this.get14$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionItemResponse>): ProductionItemResponse => r.body)
    );
  }

  /** Path part for operation `delete4()` */
  static readonly Delete4Path = '/production/input-item/{id}';

  /**
   * Deletes a Production Input Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete4()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete4$Response(params: Delete4$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete4(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a Production Input Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete4(params: Delete4$Params, context?: HttpContext): Observable<void> {
    return this.delete4$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllByProductionOrder()` */
  static readonly GetAllByProductionOrderPath = '/production/input-item/order/{id}';

  /**
   * Gets all Production Input Items by Production Order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllByProductionOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByProductionOrder$Response(params: GetAllByProductionOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductionItemResponse>>> {
    return getAllByProductionOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Production Input Items by Production Order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllByProductionOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByProductionOrder(params: GetAllByProductionOrder$Params, context?: HttpContext): Observable<Array<ProductionItemResponse>> {
    return this.getAllByProductionOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductionItemResponse>>): Array<ProductionItemResponse> => r.body)
    );
  }

}
