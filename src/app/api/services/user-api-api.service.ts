/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addRolesToUser } from '../fn/user-api/add-roles-to-user';
import { AddRolesToUser$Params } from '../fn/user-api/add-roles-to-user';
import { create } from '../fn/user-api/create';
import { Create$Params } from '../fn/user-api/create';
import { delete$ } from '../fn/user-api/delete';
import { Delete$Params } from '../fn/user-api/delete';
import { get } from '../fn/user-api/get';
import { Get$Params } from '../fn/user-api/get';
import { getAll } from '../fn/user-api/get-all';
import { GetAll$Params } from '../fn/user-api/get-all';
import { getByEmail } from '../fn/user-api/get-by-email';
import { GetByEmail$Params } from '../fn/user-api/get-by-email';
import { getByUsername } from '../fn/user-api/get-by-username';
import { GetByUsername$Params } from '../fn/user-api/get-by-username';
import { update } from '../fn/user-api/update';
import { Update$Params } from '../fn/user-api/update';
import { UserResponse } from '../models/user-response';


/**
 * Manages User Endpoints
 */
@Injectable({ providedIn: 'root' })
export class UserApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get()` */
  static readonly GetPath = '/user/{id}';

  /**
   * Gets a User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get()` instead.
   *
   * This method doesn't expect any request body.
   */
  get$Response(params: Get$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return get(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get(params: Get$Params, context?: HttpContext): Observable<UserResponse> {
    return this.get$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `update()` */
  static readonly UpdatePath = '/user/{id}';

  /**
   * Creates a new User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<UserResponse> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `delete()` */
  static readonly DeletePath = '/user/{id}';

  /**
   * Deletes a User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params: Delete$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return delete$(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params: Delete$Params, context?: HttpContext): Observable<UserResponse> {
    return this.delete$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `getAll()` */
  static readonly GetAllPath = '/user';

  /**
   * Gets all Users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll$Response(params?: GetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return getAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll(params?: GetAll$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.getAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /** Path part for operation `create()` */
  static readonly CreatePath = '/user';

  /**
   * Creates a new User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create$Response(params: Create$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return create(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create(params: Create$Params, context?: HttpContext): Observable<UserResponse> {
    return this.create$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `addRolesToUser()` */
  static readonly AddRolesToUserPath = '/user';

  /**
   * Adds roles to user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRolesToUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRolesToUser$Response(params: AddRolesToUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return addRolesToUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Adds roles to user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRolesToUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRolesToUser(params: AddRolesToUser$Params, context?: HttpContext): Observable<UserResponse> {
    return this.addRolesToUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `getByUsername()` */
  static readonly GetByUsernamePath = '/user/username/{username}';

  /**
   * Gets a User by Username.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByUsername()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByUsername$Response(params: GetByUsername$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getByUsername(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a User by Username.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByUsername$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByUsername(params: GetByUsername$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getByUsername$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `getByEmail()` */
  static readonly GetByEmailPath = '/user/email/{email}';

  /**
   * Gets a User by Email.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByEmail$Response(params: GetByEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getByEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a User by Email.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByEmail(params: GetByEmail$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getByEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

}
