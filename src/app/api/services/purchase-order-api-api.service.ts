/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approvePurchaseOrder } from '../fn/purchase-order-api/approve-purchase-order';
import { ApprovePurchaseOrder$Params } from '../fn/purchase-order-api/approve-purchase-order';
import { clearPurchaseOrder } from '../fn/purchase-order-api/clear-purchase-order';
import { ClearPurchaseOrder$Params } from '../fn/purchase-order-api/clear-purchase-order';
import { createPurchaseOrder } from '../fn/purchase-order-api/create-purchase-order';
import { CreatePurchaseOrder$Params } from '../fn/purchase-order-api/create-purchase-order';
import { finishPurchaseOrder } from '../fn/purchase-order-api/finish-purchase-order';
import { FinishPurchaseOrder$Params } from '../fn/purchase-order-api/finish-purchase-order';
import { get12 } from '../fn/purchase-order-api/get-12';
import { Get12$Params } from '../fn/purchase-order-api/get-12';
import { getAll5 } from '../fn/purchase-order-api/get-all-5';
import { GetAll5$Params } from '../fn/purchase-order-api/get-all-5';
import { getAllByStatus } from '../fn/purchase-order-api/get-all-by-status';
import { GetAllByStatus$Params } from '../fn/purchase-order-api/get-all-by-status';
import { getPendingPurchaseOrders } from '../fn/purchase-order-api/get-pending-purchase-orders';
import { GetPendingPurchaseOrders$Params } from '../fn/purchase-order-api/get-pending-purchase-orders';
import { PurchaseOrderResponse } from '../models/purchase-order-response';
import { vetPurchaseOrder } from '../fn/purchase-order-api/vet-purchase-order';
import { VetPurchaseOrder$Params } from '../fn/purchase-order-api/vet-purchase-order';


/**
 * Manages Purchase order endpoints
 */
@Injectable({ providedIn: 'root' })
export class PurchaseOrderApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAll5()` */
  static readonly GetAll5Path = '/purchase/order';

  /**
   * Gets all purchase orders.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll5()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll5$Response(params?: GetAll5$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchaseOrderResponse>>> {
    return getAll5(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all purchase orders.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll5(params?: GetAll5$Params, context?: HttpContext): Observable<Array<PurchaseOrderResponse>> {
    return this.getAll5$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchaseOrderResponse>>): Array<PurchaseOrderResponse> => r.body)
    );
  }

  /** Path part for operation `createPurchaseOrder()` */
  static readonly CreatePurchaseOrderPath = '/purchase/order';

  /**
   * Creates new Purchase order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPurchaseOrder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPurchaseOrder$Response(params: CreatePurchaseOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseOrderResponse>> {
    return createPurchaseOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Purchase order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPurchaseOrder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPurchaseOrder(params: CreatePurchaseOrder$Params, context?: HttpContext): Observable<PurchaseOrderResponse> {
    return this.createPurchaseOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseOrderResponse>): PurchaseOrderResponse => r.body)
    );
  }

  /** Path part for operation `vetPurchaseOrder()` */
  static readonly VetPurchaseOrderPath = '/purchase/order/vet/{id}';

  /**
   * Vets purchase order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `vetPurchaseOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  vetPurchaseOrder$Response(params: VetPurchaseOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseOrderResponse>> {
    return vetPurchaseOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * Vets purchase order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `vetPurchaseOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  vetPurchaseOrder(params: VetPurchaseOrder$Params, context?: HttpContext): Observable<PurchaseOrderResponse> {
    return this.vetPurchaseOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseOrderResponse>): PurchaseOrderResponse => r.body)
    );
  }

  /** Path part for operation `finishPurchaseOrder()` */
  static readonly FinishPurchaseOrderPath = '/purchase/order/receive';

  /**
   * Finish purchase order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `finishPurchaseOrder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  finishPurchaseOrder$Response(params: FinishPurchaseOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseOrderResponse>> {
    return finishPurchaseOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * Finish purchase order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `finishPurchaseOrder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  finishPurchaseOrder(params: FinishPurchaseOrder$Params, context?: HttpContext): Observable<PurchaseOrderResponse> {
    return this.finishPurchaseOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseOrderResponse>): PurchaseOrderResponse => r.body)
    );
  }

  /** Path part for operation `clearPurchaseOrder()` */
  static readonly ClearPurchaseOrderPath = '/purchase/order/clear/{id}';

  /**
   * Clear purchase order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clearPurchaseOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearPurchaseOrder$Response(params: ClearPurchaseOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseOrderResponse>> {
    return clearPurchaseOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * Clear purchase order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clearPurchaseOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearPurchaseOrder(params: ClearPurchaseOrder$Params, context?: HttpContext): Observable<PurchaseOrderResponse> {
    return this.clearPurchaseOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseOrderResponse>): PurchaseOrderResponse => r.body)
    );
  }

  /** Path part for operation `approvePurchaseOrder()` */
  static readonly ApprovePurchaseOrderPath = '/purchase/order/approve';

  /**
   * Approve purchase order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approvePurchaseOrder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  approvePurchaseOrder$Response(params: ApprovePurchaseOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseOrderResponse>> {
    return approvePurchaseOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * Approve purchase order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approvePurchaseOrder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  approvePurchaseOrder(params: ApprovePurchaseOrder$Params, context?: HttpContext): Observable<PurchaseOrderResponse> {
    return this.approvePurchaseOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseOrderResponse>): PurchaseOrderResponse => r.body)
    );
  }

  /** Path part for operation `get12()` */
  static readonly Get12Path = '/purchase/order/{id}';

  /**
   * Gets a purchase order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get12()` instead.
   *
   * This method doesn't expect any request body.
   */
  get12$Response(params: Get12$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseOrderResponse>> {
    return get12(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a purchase order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get12$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get12(params: Get12$Params, context?: HttpContext): Observable<PurchaseOrderResponse> {
    return this.get12$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseOrderResponse>): PurchaseOrderResponse => r.body)
    );
  }

  /** Path part for operation `getAllByStatus()` */
  static readonly GetAllByStatusPath = '/purchase/order/status/{status}';

  /**
   * Gets all purchase orders bu status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByStatus$Response(params: GetAllByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchaseOrderResponse>>> {
    return getAllByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all purchase orders bu status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllByStatus(params: GetAllByStatus$Params, context?: HttpContext): Observable<Array<PurchaseOrderResponse>> {
    return this.getAllByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchaseOrderResponse>>): Array<PurchaseOrderResponse> => r.body)
    );
  }

  /** Path part for operation `getPendingPurchaseOrders()` */
  static readonly GetPendingPurchaseOrdersPath = '/purchase/order/pending';

  /**
   * Gets pending Purchase Orders.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPendingPurchaseOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingPurchaseOrders$Response(params?: GetPendingPurchaseOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchaseOrderResponse>>> {
    return getPendingPurchaseOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets pending Purchase Orders.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPendingPurchaseOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingPurchaseOrders(params?: GetPendingPurchaseOrders$Params, context?: HttpContext): Observable<Array<PurchaseOrderResponse>> {
    return this.getPendingPurchaseOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchaseOrderResponse>>): Array<PurchaseOrderResponse> => r.body)
    );
  }

}
