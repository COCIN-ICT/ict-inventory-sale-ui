/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create2 } from '../fn/unit-of-measure-api/create-2';
import { Create2$Params } from '../fn/unit-of-measure-api/create-2';
import { get2 } from '../fn/unit-of-measure-api/get-2';
import { Get2$Params } from '../fn/unit-of-measure-api/get-2';
import { getAll2 } from '../fn/unit-of-measure-api/get-all-2';
import { GetAll2$Params } from '../fn/unit-of-measure-api/get-all-2';
import { UnitOfMeasureResponse } from '../models/unit-of-measure-response';
import { update2 } from '../fn/unit-of-measure-api/update-2';
import { Update2$Params } from '../fn/unit-of-measure-api/update-2';


/**
 * manages unit of measure endpoints
 */
@Injectable({ providedIn: 'root' })
export class UnitOfMeasureApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get2()` */
  static readonly Get2Path = '/unit-of-measure/{id}';

  /**
   * Gets Unit of Measure.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get2()` instead.
   *
   * This method doesn't expect any request body.
   */
  get2$Response(params: Get2$Params, context?: HttpContext): Observable<StrictHttpResponse<UnitOfMeasureResponse>> {
    return get2(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets Unit of Measure.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get2(params: Get2$Params, context?: HttpContext): Observable<UnitOfMeasureResponse> {
    return this.get2$Response(params, context).pipe(
      map((r: StrictHttpResponse<UnitOfMeasureResponse>): UnitOfMeasureResponse => r.body)
    );
  }

  /** Path part for operation `update2()` */
  static readonly Update2Path = '/unit-of-measure/{id}';

  /**
   * Updates Unit of Measure.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update2$Response(params: Update2$Params, context?: HttpContext): Observable<StrictHttpResponse<UnitOfMeasureResponse>> {
    return update2(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates Unit of Measure.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update2(params: Update2$Params, context?: HttpContext): Observable<UnitOfMeasureResponse> {
    return this.update2$Response(params, context).pipe(
      map((r: StrictHttpResponse<UnitOfMeasureResponse>): UnitOfMeasureResponse => r.body)
    );
  }

  /** Path part for operation `getAll2()` */
  static readonly GetAll2Path = '/unit-of-measure';

  /**
   * Gets all Units of Measure.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll2()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll2$Response(params?: GetAll2$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UnitOfMeasureResponse>>> {
    return getAll2(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Units of Measure.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll2(params?: GetAll2$Params, context?: HttpContext): Observable<Array<UnitOfMeasureResponse>> {
    return this.getAll2$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UnitOfMeasureResponse>>): Array<UnitOfMeasureResponse> => r.body)
    );
  }

  /** Path part for operation `create2()` */
  static readonly Create2Path = '/unit-of-measure';

  /**
   * Creates new Unit of Measure.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create2$Response(params: Create2$Params, context?: HttpContext): Observable<StrictHttpResponse<UnitOfMeasureResponse>> {
    return create2(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Unit of Measure.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create2(params: Create2$Params, context?: HttpContext): Observable<UnitOfMeasureResponse> {
    return this.create2$Response(params, context).pipe(
      map((r: StrictHttpResponse<UnitOfMeasureResponse>): UnitOfMeasureResponse => r.body)
    );
  }

}
