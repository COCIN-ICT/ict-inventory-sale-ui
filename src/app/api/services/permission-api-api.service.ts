/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create9 } from '../fn/permission-api/create-9';
import { Create9$Params } from '../fn/permission-api/create-9';
import { delete2 } from '../fn/permission-api/delete-2';
import { Delete2$Params } from '../fn/permission-api/delete-2';
import { get7 } from '../fn/permission-api/get-7';
import { Get7$Params } from '../fn/permission-api/get-7';
import { getAll6 } from '../fn/permission-api/get-all-6';
import { GetAll6$Params } from '../fn/permission-api/get-all-6';
import { PermissionResponse } from '../models/permission-response';
import { update7 } from '../fn/permission-api/update-7';
import { Update7$Params } from '../fn/permission-api/update-7';


/**
 * Manages permission Endpoints
 */
@Injectable({ providedIn: 'root' })
export class PermissionApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get7()` */
  static readonly Get7Path = '/permission/{id}';

  /**
   * Gets a Permission.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get7()` instead.
   *
   * This method doesn't expect any request body.
   */
  get7$Response(params: Get7$Params, context?: HttpContext): Observable<StrictHttpResponse<PermissionResponse>> {
    return get7(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a Permission.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get7$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get7(params: Get7$Params, context?: HttpContext): Observable<PermissionResponse> {
    return this.get7$Response(params, context).pipe(
      map((r: StrictHttpResponse<PermissionResponse>): PermissionResponse => r.body)
    );
  }

  /** Path part for operation `update7()` */
  static readonly Update7Path = '/permission/{id}';

  /**
   * Updates a Permission.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update7()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update7$Response(params: Update7$Params, context?: HttpContext): Observable<StrictHttpResponse<PermissionResponse>> {
    return update7(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a Permission.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update7$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update7(params: Update7$Params, context?: HttpContext): Observable<PermissionResponse> {
    return this.update7$Response(params, context).pipe(
      map((r: StrictHttpResponse<PermissionResponse>): PermissionResponse => r.body)
    );
  }

  /** Path part for operation `delete2()` */
  static readonly Delete2Path = '/permission/{id}';

  /**
   * Deletes a Permission.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete2()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete2$Response(params: Delete2$Params, context?: HttpContext): Observable<StrictHttpResponse<PermissionResponse>> {
    return delete2(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a Permission.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete2(params: Delete2$Params, context?: HttpContext): Observable<PermissionResponse> {
    return this.delete2$Response(params, context).pipe(
      map((r: StrictHttpResponse<PermissionResponse>): PermissionResponse => r.body)
    );
  }

  /** Path part for operation `getAll6()` */
  static readonly GetAll6Path = '/permission';

  /**
   * Gets all Permissions.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll6()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll6$Response(params?: GetAll6$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PermissionResponse>>> {
    return getAll6(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Permissions.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll6(params?: GetAll6$Params, context?: HttpContext): Observable<Array<PermissionResponse>> {
    return this.getAll6$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PermissionResponse>>): Array<PermissionResponse> => r.body)
    );
  }

  /** Path part for operation `create9()` */
  static readonly Create9Path = '/permission';

  /**
   * Creates New Permission.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create9()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create9$Response(params: Create9$Params, context?: HttpContext): Observable<StrictHttpResponse<PermissionResponse>> {
    return create9(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates New Permission.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create9$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create9(params: Create9$Params, context?: HttpContext): Observable<PermissionResponse> {
    return this.create9$Response(params, context).pipe(
      map((r: StrictHttpResponse<PermissionResponse>): PermissionResponse => r.body)
    );
  }

}
