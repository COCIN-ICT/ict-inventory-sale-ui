/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changeStatus } from '../fn/supplier-api/change-status';
import { ChangeStatus$Params } from '../fn/supplier-api/change-status';
import { create3 } from '../fn/supplier-api/create-3';
import { Create3$Params } from '../fn/supplier-api/create-3';
import { get3 } from '../fn/supplier-api/get-3';
import { Get3$Params } from '../fn/supplier-api/get-3';
import { getAll3 } from '../fn/supplier-api/get-all-3';
import { GetAll3$Params } from '../fn/supplier-api/get-all-3';
import { getAllActive } from '../fn/supplier-api/get-all-active';
import { GetAllActive$Params } from '../fn/supplier-api/get-all-active';
import { getAllPageable } from '../fn/supplier-api/get-all-pageable';
import { GetAllPageable$Params } from '../fn/supplier-api/get-all-pageable';
import { SupplierResponse } from '../models/supplier-response';
import { update3 } from '../fn/supplier-api/update-3';
import { Update3$Params } from '../fn/supplier-api/update-3';


/**
 * Manages Supplies endpoints
 */
@Injectable({ providedIn: 'root' })
export class SupplierApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get3()` */
  static readonly Get3Path = '/supplier/{id}';

  /**
   * Gets a Supplier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get3()` instead.
   *
   * This method doesn't expect any request body.
   */
  get3$Response(params: Get3$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierResponse>> {
    return get3(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a Supplier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get3(params: Get3$Params, context?: HttpContext): Observable<SupplierResponse> {
    return this.get3$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierResponse>): SupplierResponse => r.body)
    );
  }

  /** Path part for operation `update3()` */
  static readonly Update3Path = '/supplier/{id}';

  /**
   * Updates a Supplier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update3$Response(params: Update3$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierResponse>> {
    return update3(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a Supplier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update3(params: Update3$Params, context?: HttpContext): Observable<SupplierResponse> {
    return this.update3$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierResponse>): SupplierResponse => r.body)
    );
  }

  /** Path part for operation `changeStatus()` */
  static readonly ChangeStatusPath = '/supplier/{id}';

  /**
   * Change status for a Supplier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus$Response(params: ChangeStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierResponse>> {
    return changeStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Change status for a Supplier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus(params: ChangeStatus$Params, context?: HttpContext): Observable<SupplierResponse> {
    return this.changeStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierResponse>): SupplierResponse => r.body)
    );
  }

  /** Path part for operation `getAll3()` */
  static readonly GetAll3Path = '/supplier';

  /**
   * Gets all supplies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll3()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll3$Response(params?: GetAll3$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SupplierResponse>>> {
    return getAll3(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all supplies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll3(params?: GetAll3$Params, context?: HttpContext): Observable<Array<SupplierResponse>> {
    return this.getAll3$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SupplierResponse>>): Array<SupplierResponse> => r.body)
    );
  }

  /** Path part for operation `create3()` */
  static readonly Create3Path = '/supplier';

  /**
   * Creates new Supplier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create3$Response(params: Create3$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierResponse>> {
    return create3(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Supplier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create3(params: Create3$Params, context?: HttpContext): Observable<SupplierResponse> {
    return this.create3$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierResponse>): SupplierResponse => r.body)
    );
  }

  /** Path part for operation `getAllPageable()` */
  static readonly GetAllPageablePath = '/supplier/page';

  /**
   * Gets all supplies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPageable()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPageable$Response(params: GetAllPageable$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SupplierResponse>>> {
    return getAllPageable(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all supplies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPageable$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPageable(params: GetAllPageable$Params, context?: HttpContext): Observable<Array<SupplierResponse>> {
    return this.getAllPageable$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SupplierResponse>>): Array<SupplierResponse> => r.body)
    );
  }

  /** Path part for operation `getAllActive()` */
  static readonly GetAllActivePath = '/supplier/active';

  /**
   * Gets all active supplies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllActive()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllActive$Response(params?: GetAllActive$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SupplierResponse>>> {
    return getAllActive(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all active supplies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllActive$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllActive(params?: GetAllActive$Params, context?: HttpContext): Observable<Array<SupplierResponse>> {
    return this.getAllActive$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SupplierResponse>>): Array<SupplierResponse> => r.body)
    );
  }

}
