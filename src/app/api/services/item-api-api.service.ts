/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changeStatus2 } from '../fn/item-api/change-status-2';
import { ChangeStatus2$Params } from '../fn/item-api/change-status-2';
import { create10 } from '../fn/item-api/create-10';
import { Create10$Params } from '../fn/item-api/create-10';
import { getAll7 } from '../fn/item-api/get-all-7';
import { GetAll7$Params } from '../fn/item-api/get-all-7';
import { getById } from '../fn/item-api/get-by-id';
import { GetById$Params } from '../fn/item-api/get-by-id';
import { getByStatus } from '../fn/item-api/get-by-status';
import { GetByStatus$Params } from '../fn/item-api/get-by-status';
import { ItemResponse } from '../models/item-response';
import { update8 } from '../fn/item-api/update-8';
import { Update8$Params } from '../fn/item-api/update-8';


/**
 * Manages Item endpoints
 */
@Injectable({ providedIn: 'root' })
export class ItemApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getById()` */
  static readonly GetByIdPath = '/item/{id}';

  /**
   * Creates new Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById$Response(params: GetById$Params, context?: HttpContext): Observable<StrictHttpResponse<ItemResponse>> {
    return getById(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById(params: GetById$Params, context?: HttpContext): Observable<ItemResponse> {
    return this.getById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ItemResponse>): ItemResponse => r.body)
    );
  }

  /** Path part for operation `update8()` */
  static readonly Update8Path = '/item/{id}';

  /**
   * Updates an Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update8()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update8$Response(params: Update8$Params, context?: HttpContext): Observable<StrictHttpResponse<ItemResponse>> {
    return update8(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates an Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update8$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update8(params: Update8$Params, context?: HttpContext): Observable<ItemResponse> {
    return this.update8$Response(params, context).pipe(
      map((r: StrictHttpResponse<ItemResponse>): ItemResponse => r.body)
    );
  }

  /** Path part for operation `getAll7()` */
  static readonly GetAll7Path = '/item';

  /**
   * Gets all Items.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll7()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll7$Response(params?: GetAll7$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ItemResponse>>> {
    return getAll7(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Items.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll7$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll7(params?: GetAll7$Params, context?: HttpContext): Observable<Array<ItemResponse>> {
    return this.getAll7$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ItemResponse>>): Array<ItemResponse> => r.body)
    );
  }

  /** Path part for operation `create10()` */
  static readonly Create10Path = '/item';

  /**
   * Creates new Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create10()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create10$Response(params: Create10$Params, context?: HttpContext): Observable<StrictHttpResponse<ItemResponse>> {
    return create10(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create10$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create10(params: Create10$Params, context?: HttpContext): Observable<ItemResponse> {
    return this.create10$Response(params, context).pipe(
      map((r: StrictHttpResponse<ItemResponse>): ItemResponse => r.body)
    );
  }

  /** Path part for operation `changeStatus2()` */
  static readonly ChangeStatus2Path = '/item/change-status/{id}';

  /**
   * Changes status of Item.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeStatus2()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus2$Response(params: ChangeStatus2$Params, context?: HttpContext): Observable<StrictHttpResponse<ItemResponse>> {
    return changeStatus2(this.http, this.rootUrl, params, context);
  }

  /**
   * Changes status of Item.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeStatus2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus2(params: ChangeStatus2$Params, context?: HttpContext): Observable<ItemResponse> {
    return this.changeStatus2$Response(params, context).pipe(
      map((r: StrictHttpResponse<ItemResponse>): ItemResponse => r.body)
    );
  }

  /** Path part for operation `getByStatus()` */
  static readonly GetByStatusPath = '/item/status/{isActive}';

  /**
   * Gets Items by status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByStatus$Response(params: GetByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ItemResponse>>> {
    return getByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets Items by status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByStatus(params: GetByStatus$Params, context?: HttpContext): Observable<Array<ItemResponse>> {
    return this.getByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ItemResponse>>): Array<ItemResponse> => r.body)
    );
  }

}
