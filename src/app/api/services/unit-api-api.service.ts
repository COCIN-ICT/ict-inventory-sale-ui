/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changeStatus1 } from '../fn/unit-api/change-status-1';
import { ChangeStatus1$Params } from '../fn/unit-api/change-status-1';
import { create1 } from '../fn/unit-api/create-1';
import { Create1$Params } from '../fn/unit-api/create-1';
import { get1 } from '../fn/unit-api/get-1';
import { Get1$Params } from '../fn/unit-api/get-1';
import { getAll1 } from '../fn/unit-api/get-all-1';
import { GetAll1$Params } from '../fn/unit-api/get-all-1';
import { getDepartment } from '../fn/unit-api/get-department';
import { GetDepartment$Params } from '../fn/unit-api/get-department';
import { UnitResponse } from '../models/unit-response';
import { update1 } from '../fn/unit-api/update-1';
import { Update1$Params } from '../fn/unit-api/update-1';


/**
 * Manages Unit Endpoints
 */
@Injectable({ providedIn: 'root' })
export class UnitApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get1()` */
  static readonly Get1Path = '/unit/{id}';

  /**
   * Gets a Unt.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get1()` instead.
   *
   * This method doesn't expect any request body.
   */
  get1$Response(params: Get1$Params, context?: HttpContext): Observable<StrictHttpResponse<UnitResponse>> {
    return get1(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a Unt.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get1(params: Get1$Params, context?: HttpContext): Observable<UnitResponse> {
    return this.get1$Response(params, context).pipe(
      map((r: StrictHttpResponse<UnitResponse>): UnitResponse => r.body)
    );
  }

  /** Path part for operation `update1()` */
  static readonly Update1Path = '/unit/{id}';

  /**
   * Creates new Unt.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update1$Response(params: Update1$Params, context?: HttpContext): Observable<StrictHttpResponse<UnitResponse>> {
    return update1(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Unt.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update1(params: Update1$Params, context?: HttpContext): Observable<UnitResponse> {
    return this.update1$Response(params, context).pipe(
      map((r: StrictHttpResponse<UnitResponse>): UnitResponse => r.body)
    );
  }

  /** Path part for operation `getAll1()` */
  static readonly GetAll1Path = '/unit';

  /**
   * Gets all Units.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll1$Response(params?: GetAll1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UnitResponse>>> {
    return getAll1(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all Units.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll1(params?: GetAll1$Params, context?: HttpContext): Observable<Array<UnitResponse>> {
    return this.getAll1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UnitResponse>>): Array<UnitResponse> => r.body)
    );
  }

  /** Path part for operation `create1()` */
  static readonly Create1Path = '/unit';

  /**
   * Creates new Unt.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create1$Response(params: Create1$Params, context?: HttpContext): Observable<StrictHttpResponse<UnitResponse>> {
    return create1(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new Unt.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create1(params: Create1$Params, context?: HttpContext): Observable<UnitResponse> {
    return this.create1$Response(params, context).pipe(
      map((r: StrictHttpResponse<UnitResponse>): UnitResponse => r.body)
    );
  }

  /** Path part for operation `changeStatus1()` */
  static readonly ChangeStatus1Path = '/unit/change-status/{id}';

  /**
   * Changes unit status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeStatus1()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus1$Response(params: ChangeStatus1$Params, context?: HttpContext): Observable<StrictHttpResponse<UnitResponse>> {
    return changeStatus1(this.http, this.rootUrl, params, context);
  }

  /**
   * Changes unit status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeStatus1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus1(params: ChangeStatus1$Params, context?: HttpContext): Observable<UnitResponse> {
    return this.changeStatus1$Response(params, context).pipe(
      map((r: StrictHttpResponse<UnitResponse>): UnitResponse => r.body)
    );
  }

  /** Path part for operation `getDepartment()` */
  static readonly GetDepartmentPath = '/unit/department/{id}';

  /**
   * Gets Units by Department.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDepartment()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDepartment$Response(params: GetDepartment$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UnitResponse>>> {
    return getDepartment(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets Units by Department.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDepartment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDepartment(params: GetDepartment$Params, context?: HttpContext): Observable<Array<UnitResponse>> {
    return this.getDepartment$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UnitResponse>>): Array<UnitResponse> => r.body)
    );
  }

}
