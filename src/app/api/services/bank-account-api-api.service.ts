/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BankAccountResponse } from '../models/bank-account-response';
import { changeStatus3 } from '../fn/bank-account-api/change-status-3';
import { ChangeStatus3$Params } from '../fn/bank-account-api/change-status-3';
import { create13 } from '../fn/bank-account-api/create-13';
import { Create13$Params } from '../fn/bank-account-api/create-13';
import { get10 } from '../fn/bank-account-api/get-10';
import { Get10$Params } from '../fn/bank-account-api/get-10';
import { getAll10 } from '../fn/bank-account-api/get-all-10';
import { GetAll10$Params } from '../fn/bank-account-api/get-all-10';
import { getByStatus1 } from '../fn/bank-account-api/get-by-status-1';
import { GetByStatus1$Params } from '../fn/bank-account-api/get-by-status-1';
import { update11 } from '../fn/bank-account-api/update-11';
import { Update11$Params } from '../fn/bank-account-api/update-11';


/**
 * Manages Bank Account Endpoints
 */
@Injectable({ providedIn: 'root' })
export class BankAccountApiApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `get10()` */
  static readonly Get10Path = '/bank-account/{id}';

  /**
   * Gets a bank account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get10()` instead.
   *
   * This method doesn't expect any request body.
   */
  get10$Response(params: Get10$Params, context?: HttpContext): Observable<StrictHttpResponse<BankAccountResponse>> {
    return get10(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a bank account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get10$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get10(params: Get10$Params, context?: HttpContext): Observable<BankAccountResponse> {
    return this.get10$Response(params, context).pipe(
      map((r: StrictHttpResponse<BankAccountResponse>): BankAccountResponse => r.body)
    );
  }

  /** Path part for operation `update11()` */
  static readonly Update11Path = '/bank-account/{id}';

  /**
   * Updates bank account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update11()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update11$Response(params: Update11$Params, context?: HttpContext): Observable<StrictHttpResponse<BankAccountResponse>> {
    return update11(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates bank account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update11$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update11(params: Update11$Params, context?: HttpContext): Observable<BankAccountResponse> {
    return this.update11$Response(params, context).pipe(
      map((r: StrictHttpResponse<BankAccountResponse>): BankAccountResponse => r.body)
    );
  }

  /** Path part for operation `getAll10()` */
  static readonly GetAll10Path = '/bank-account';

  /**
   * Gets al bank accounts.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll10()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll10$Response(params?: GetAll10$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BankAccountResponse>>> {
    return getAll10(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets al bank accounts.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll10$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll10(params?: GetAll10$Params, context?: HttpContext): Observable<Array<BankAccountResponse>> {
    return this.getAll10$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BankAccountResponse>>): Array<BankAccountResponse> => r.body)
    );
  }

  /** Path part for operation `create13()` */
  static readonly Create13Path = '/bank-account';

  /**
   * Creates new bank account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create13()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create13$Response(params: Create13$Params, context?: HttpContext): Observable<StrictHttpResponse<BankAccountResponse>> {
    return create13(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates new bank account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create13$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create13(params: Create13$Params, context?: HttpContext): Observable<BankAccountResponse> {
    return this.create13$Response(params, context).pipe(
      map((r: StrictHttpResponse<BankAccountResponse>): BankAccountResponse => r.body)
    );
  }

  /** Path part for operation `changeStatus3()` */
  static readonly ChangeStatus3Path = '/bank-account/change-status/{id}';

  /**
   * Change a bank account's status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeStatus3()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus3$Response(params: ChangeStatus3$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return changeStatus3(this.http, this.rootUrl, params, context);
  }

  /**
   * Change a bank account's status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeStatus3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus3(params: ChangeStatus3$Params, context?: HttpContext): Observable<void> {
    return this.changeStatus3$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getByStatus1()` */
  static readonly GetByStatus1Path = '/bank-account/status/{status}';

  /**
   * Gets al bank accounts.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByStatus1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByStatus1$Response(params: GetByStatus1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BankAccountResponse>>> {
    return getByStatus1(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets al bank accounts.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByStatus1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByStatus1(params: GetByStatus1$Params, context?: HttpContext): Observable<Array<BankAccountResponse>> {
    return this.getByStatus1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BankAccountResponse>>): Array<BankAccountResponse> => r.body)
    );
  }

}
